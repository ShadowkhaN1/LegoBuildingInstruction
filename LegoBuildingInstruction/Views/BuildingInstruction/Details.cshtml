
@model BuildingInstruction
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

@{

    ViewBag.Values = new List<int> { 5, 4, 3, 2, 1 };

    var newComment = new Comment
    {
        BuildingInstructionId = Model.BuildingInstructionId
    };
}

<div class="container-fluid p-2">

    <div class="row">

        <div class="col-lg-7">

            <div class="embed-responsive embed-responsive-16by9">
                <iframe class="embed-responsive-item" src="@Model.VideoUrl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

            </div>

        </div>


        <div class="col-lg-5">

            <h4 class="text-center">@Model.Name</h4>

            <hr style="margin-bottom: 0px" />
            <div class="row">
                <div class="col-sm">
                    <p class="text-secondary"> Pages: @Model.Pages </p>
                </div>
                <div class="col-sm">
                    <p class="text-secondary"> Set: @Model.Set </p>
                </div>


                <div class="col-sm-5">
                    <partial name="_Rating" model="@Model.RateInstructions" />
                </div>

            </div>
            <hr style="margin-top: 0px" />

            <div class="row">

                <div class="col-sm-4">
                    @using (Html.BeginForm("RateInstruction", "BuildingInstruction"))
                    {
                        @Html.Hidden("buildingInstructionId", Model.BuildingInstructionId)
                        @Html.DropDownList("rateValue", new SelectList(ViewBag.Values), "Rate:", htmlAttributes: new { @class = "btn btn-warning dropdown-toggle text-white", onchange = "this.form.submit();" });
                    }
                </div>


                <div class="col-sm-4 mt-2">
                    <p class="text-secondary">Your rating: @(Model.RateInstructions.FirstOrDefault(x => x.BuildingInstructionId == Model.BuildingInstructionId && x.UserId == UserManager.GetUserId(User))?.RatingValue )</p>
                </div>

                <div class="col-sm-4 mt-2">
                    <a asp-controller="FavoritesBuildingInstruction" asp-action="AddFavoritesBuildingInstruction" asp-route-buildingInstructionId="@Model.BuildingInstructionId" class="text-primary"><partial name="_FavoritesBuildingInstructionIcon" />Favorites</a>
                </div>
            </div>

            <div class="row">
                <div class="col-8 mt-3">

                    <p class="text-secondary">Author: @Model.User.FirstName @Model.User.LastName</p>

                </div>

                @if (SignInManager.IsSignedIn(User))
                {
                    @if (UserManager.GetUserId(User) == Model.UserId)
                    {
                        <div class="col justify-content-end mt-3">
                            <a asp-controller="BuildingInstruction" asp-action="EditInstruction" asp-route-id="@Model.BuildingInstructionId" class="text-secondary"><i class="fas fa-edit fa-fw"></i>Edit</a>


                            <a asp-controller="BuildingInstruction" asp-action="DeleteInstruction" asp-route-id="@Model.BuildingInstructionId" class="text-secondary" onclick="return confirm('Are you sure you want to delete?')"><i class="fas fa-trash fa-fw"></i>Delete</a>
                        </div>
                    }
                }

            </div>


            <hr style="margin-top: 0px" />

            <p class="text-secondary">@Model.LongDescription</p>


            <a type="button" class="btn btn-secondary btn-block" asp-controller="BuildingInstruction" asp-action="InstructionPDF" asp-route-id="@Model.BuildingInstructionId">Get Building Instruction</a>

            @if (Model.Category.CategoryName == "Mindstorms")
            {

                <a asp-action="DownloadProgram" asp-controller="BuildingInstruction" asp-route-buildingInstructionId="@Model.BuildingInstructionId" type="button" class="btn btn-secondary btn-block">Get Program</a>
            }

            @if (!ViewData.ModelState.IsValid && ViewData.ModelState["Error"].Errors.Count > 0)
            {
                <div class="alert alert-warning">
                    <strong>Error!</strong> @ViewData.ModelState["Error"].Errors.First().ErrorMessage
                </div>
            }

        </div>

    </div>

</div>


<section class="content-item" id="comments">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">

                <partial name="_Comment" model="newComment" />
                @await Component.InvokeAsync("CommentList", new { buildingInstructionId = Model.BuildingInstructionId })

            </div>
        </div>
    </div>
</section>


